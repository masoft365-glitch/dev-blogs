// src/pages/IdeaGeneratorPage.tsx
// Note: This component is currently not routed but is kept for potential future use.

import React, { useState } from 'react';
import { GoogleGenAI, Type } from '@google/genai';
import { CATEGORIES } from '../constants';
import { SparklesIcon, CopyIcon, CheckIcon } from '../components/Icons';
import { Category } from '../types';

// Interface for the structure of a single generated idea.
interface Idea {
  title: string;
}

// A skeleton component to show while ideas are being generated.
const IdeaSkeleton: React.FC = () => (
  <div className="animate-pulse flex items-center justify-between p-4 border-b border-slate-200 dark:border-slate-700">
    <div className="h-4 bg-slate-200 dark:bg-slate-700 rounded w-3/4"></div>
    <div className="h-8 w-8 bg-slate-200 dark:bg-slate-700 rounded-full"></div>
  </div>
);

/**
 * An AI-powered tool to generate blog post ideas based on selected categories.
 */
const IdeaGeneratorPage: React.FC = () => {
  // State for user-selected categories.
  const [selectedCategories, setSelectedCategories] = useState<Category[]>([]);
  // State to store the ideas generated by the AI.
  const [generatedIdeas, setGeneratedIdeas] = useState<Idea[]>([]);
  // State to manage the loading status of the API call.
  const [isLoading, setIsLoading] = useState(false);
  // State to hold any potential error messages.
  const [error, setError] = useState<string | null>(null);
  // State to provide feedback when a title is copied.
  const [copiedIndex, setCopiedIndex] = useState<number | null>(null);

  /**
   * Toggles the selection of a category.
   */
  const handleCategoryToggle = (category: Category) => {
    setSelectedCategories(prev =>
      prev.includes(category)
        ? prev.filter(c => c !== category) // Remove if already selected
        : [...prev, category] // Add if not selected
    );
  };

  /**
   * Copies a given text to the clipboard and provides user feedback.
   */
  const handleCopy = (text: string, index: number) => {
    navigator.clipboard.writeText(text).then(() => {
      setCopiedIndex(index);
      setTimeout(() => setCopiedIndex(null), 2000); // Reset feedback after 2 seconds
    });
  };

  /**
   * Handles the asynchronous call to the Gemini API to generate blog ideas.
   */
  const handleGenerateIdeas = async () => {
    if (selectedCategories.length === 0) {
      setError("Please select at least one category.");
      return;
    }
    // Reset state for a new request.
    setIsLoading(true);
    setError(null);
    setGeneratedIdeas([]);

    try {
      // Initialize the Gemini AI client.
      const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
      // Construct the prompt for the AI model.
      const prompt = `You are an expert content strategist specializing in SEO for tech blogs. Generate 7 engaging and SEO-friendly blog post titles for the following categories: ${selectedCategories.join(', ')}. The titles should be relevant to the latest industry trends, optimized for high search interest, and have click-worthy appeal. Provide a mix of evergreen and trending content ideas.`;

      // Make the API call with a structured JSON response schema.
      const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
          responseMimeType: "application/json",
          responseSchema: {
            type: Type.OBJECT,
            properties: {
              ideas: {
                type: Type.ARRAY,
                items: {
                  type: Type.OBJECT,
                  properties: {
                    title: {
                      type: Type.STRING,
                      description: "A catchy, SEO-friendly blog post title.",
                    },
                  },
                },
              },
            },
          },
        },
      });

      // Parse the JSON response and update the state.
      const jsonString = response.text;
      const parsed = JSON.parse(jsonString);
      setGeneratedIdeas(parsed.ideas || []);

    } catch (e) {
      console.error(e);
      setError("Failed to generate ideas. The model may be unavailable. Please try again later.");
    } finally {
      setIsLoading(false);
    }
  };


  return (
    <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-8 sm:py-12">
      {/* Page Header */}
      <section className="text-center mb-10">
        <div className="inline-block p-4 bg-sky-100 dark:bg-sky-900/50 rounded-full mb-4">
            <SparklesIcon className="w-10 h-10 text-sky-500 dark:text-sky-400" />
        </div>
        <h1 className="text-4xl sm:text-5xl font-extrabold font-display text-slate-900 dark:text-white mb-4">
          Blog Idea Generator
        </h1>
        <p className="max-w-2xl mx-auto text-lg text-slate-600 dark:text-slate-400">
          Leverage AI to generate engaging, SEO-friendly blog post titles for your next article.
        </p>
      </section>

      {/* Main Content Area */}
      <div className="max-w-3xl mx-auto bg-white dark:bg-slate-800/50 p-6 sm:p-8 rounded-lg shadow-lg">
        {/* Step 1: Category Selection */}
        <div>
          <h2 className="text-lg font-semibold text-slate-800 dark:text-slate-200 mb-3">1. Select Categories</h2>
          <div className="flex flex-wrap gap-3">
            {CATEGORIES.map(category => (
              <button
                key={category}
                onClick={() => handleCategoryToggle(category)}
                className={`px-4 py-2 text-sm font-medium rounded-full transition-colors duration-200 border ${
                  selectedCategories.includes(category)
                    ? 'bg-sky-500 text-white border-sky-500' // Selected style
                    : 'bg-transparent text-slate-600 dark:text-slate-300 border-slate-300 dark:border-slate-600 hover:bg-slate-100 dark:hover:bg-slate-700' // Default style
                }`}
              >
                {category}
              </button>
            ))}
          </div>
        </div>

        {/* Step 2: Generation Button */}
        <div className="mt-8">
            <h2 className="text-lg font-semibold text-slate-800 dark:text-slate-200 mb-3">2. Generate Ideas</h2>
            <button
              onClick={handleGenerateIdeas}
              disabled={isLoading || selectedCategories.length === 0}
              className="w-full flex items-center justify-center gap-2 px-6 py-3 text-base font-semibold text-white bg-sky-600 hover:bg-sky-700 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500 disabled:bg-slate-400 dark:disabled:bg-slate-600 disabled:cursor-not-allowed transition-colors"
            >
              {isLoading ? 'Generating...' : 'Generate Ideas'}
              <SparklesIcon className="w-5 h-5" />
            </button>
            {error && <p className="text-red-500 text-sm mt-3 text-center">{error}</p>}
        </div>

        {/* Results Section */}
        <div className="mt-10">
          <h2 className="text-xl font-bold text-slate-900 dark:text-white mb-4">Results</h2>
          <div className="bg-slate-50 dark:bg-slate-900/50 rounded-lg overflow-hidden border border-slate-200 dark:border-slate-700 min-h-[200px]">
            {isLoading && (
              <div>
                {[...Array(5)].map((_, i) => <IdeaSkeleton key={i} />)}
              </div>
            )}
            {!isLoading && generatedIdeas.length === 0 && (
                <div className="flex items-center justify-center h-full p-10 text-center">
                    <p className="text-slate-500 dark:text-slate-400">Your generated ideas will appear here.</p>
                </div>
            )}
            {!isLoading && generatedIdeas.length > 0 && (
              <ul>
                {generatedIdeas.map((idea, index) => (
                  <li key={index} className="flex items-center justify-between p-4 border-b border-slate-200 dark:border-slate-700 last:border-b-0 group">
                    <span className="text-slate-800 dark:text-slate-200 pr-4">{idea.title}</span>
                    <button onClick={() => handleCopy(idea.title, index)} className="p-2 rounded-full text-slate-500 hover:bg-slate-200 dark:hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500 transition-colors" aria-label="Copy title">
                      {copiedIndex === index ? <CheckIcon className="w-5 h-5 text-green-500" /> : <CopyIcon className="w-5 h-5" />}
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default IdeaGeneratorPage;
